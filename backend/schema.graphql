# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  studentID: String
  userInstitutions(where: UserInstitutionWhereInput! = {}, orderBy: [UserInstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserInstitutionWhereUniqueInput): [UserInstitution!]
  userInstitutionsCount(where: UserInstitutionWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  studentID: StringFilter
  userInstitutions: UserInstitutionManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserInstitutionManyRelationFilter {
  every: UserInstitutionWhereInput
  some: UserInstitutionWhereInput
  none: UserInstitutionWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  studentID: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  studentID: String
  userInstitutions: UserInstitutionRelateToManyForUpdateInput
}

input UserInstitutionRelateToManyForUpdateInput {
  disconnect: [UserInstitutionWhereUniqueInput!]
  set: [UserInstitutionWhereUniqueInput!]
  create: [UserInstitutionCreateInput!]
  connect: [UserInstitutionWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  studentID: String
  userInstitutions: UserInstitutionRelateToManyForCreateInput
}

input UserInstitutionRelateToManyForCreateInput {
  create: [UserInstitutionCreateInput!]
  connect: [UserInstitutionWhereUniqueInput!]
}

type Authentication {
  id: ID!
  tokenId: String
  associatedUser: User
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AuthenticationWhereUniqueInput {
  id: ID
  tokenId: String
}

input AuthenticationWhereInput {
  AND: [AuthenticationWhereInput!]
  OR: [AuthenticationWhereInput!]
  NOT: [AuthenticationWhereInput!]
  id: IDFilter
  tokenId: StringFilter
  associatedUser: UserWhereInput
  expirationDate: DateTimeNullableFilter
  authenticationType: StringNullableFilter
  adAuthenticationToken: StringFilter
  refreshToken: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input AuthenticationOrderByInput {
  id: OrderDirection
  tokenId: OrderDirection
  expirationDate: OrderDirection
  authenticationType: OrderDirection
  adAuthenticationToken: OrderDirection
  refreshToken: OrderDirection
}

input AuthenticationUpdateInput {
  tokenId: String
  associatedUser: UserRelateToOneForUpdateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AuthenticationUpdateArgs {
  where: AuthenticationWhereUniqueInput!
  data: AuthenticationUpdateInput!
}

input AuthenticationCreateInput {
  tokenId: String
  associatedUser: UserRelateToOneForCreateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type AzureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input AzureADIntegrationWhereInput {
  AND: [AzureADIntegrationWhereInput!]
  OR: [AzureADIntegrationWhereInput!]
  NOT: [AzureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AzureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

input AzureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationUpdateArgs {
  where: AzureADIntegrationWhereUniqueInput!
  data: AzureADIntegrationUpdateInput!
}

input AzureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

type RecognitionLog {
  id: ID!
  timestamp: DateTime
  success: String
  confidence: Float
  imageURL: String
  errorDetails: String
  user: User
}

input RecognitionLogWhereUniqueInput {
  id: ID
}

input RecognitionLogWhereInput {
  AND: [RecognitionLogWhereInput!]
  OR: [RecognitionLogWhereInput!]
  NOT: [RecognitionLogWhereInput!]
  id: IDFilter
  timestamp: DateTimeFilter
  success: StringNullableFilter
  confidence: FloatFilter
  imageURL: StringFilter
  errorDetails: StringFilter
  user: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input RecognitionLogOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  success: OrderDirection
  confidence: OrderDirection
  imageURL: OrderDirection
  errorDetails: OrderDirection
}

input RecognitionLogUpdateInput {
  timestamp: DateTime
  success: String
  confidence: Float
  imageURL: String
  errorDetails: String
  user: UserRelateToOneForUpdateInput
}

input RecognitionLogUpdateArgs {
  where: RecognitionLogWhereUniqueInput!
  data: RecognitionLogUpdateInput!
}

input RecognitionLogCreateInput {
  timestamp: DateTime
  success: String
  confidence: Float
  imageURL: String
  errorDetails: String
  user: UserRelateToOneForCreateInput
}

type Class {
  id: ID!
  name: String
  description: String
  schedule: String
  teacher: User
}

input ClassWhereUniqueInput {
  id: ID
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  schedule: StringFilter
  teacher: UserWhereInput
}

input ClassOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  schedule: OrderDirection
}

input ClassUpdateInput {
  name: String
  description: String
  schedule: String
  teacher: UserRelateToOneForUpdateInput
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  name: String
  description: String
  schedule: String
  teacher: UserRelateToOneForCreateInput
}

type Attendance {
  id: ID!
  date: DateTime
  recognized: String
  confidenceScore: Float
  imageCapturedURL: String
  user: User
  class: Class
}

input AttendanceWhereUniqueInput {
  id: ID
}

input AttendanceWhereInput {
  AND: [AttendanceWhereInput!]
  OR: [AttendanceWhereInput!]
  NOT: [AttendanceWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  recognized: StringNullableFilter
  confidenceScore: FloatFilter
  imageCapturedURL: StringFilter
  user: UserWhereInput
  class: ClassWhereInput
}

input AttendanceOrderByInput {
  id: OrderDirection
  date: OrderDirection
  recognized: OrderDirection
  confidenceScore: OrderDirection
  imageCapturedURL: OrderDirection
}

input AttendanceUpdateInput {
  date: DateTime
  recognized: String
  confidenceScore: Float
  imageCapturedURL: String
  user: UserRelateToOneForUpdateInput
  class: ClassRelateToOneForUpdateInput
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input AttendanceUpdateArgs {
  where: AttendanceWhereUniqueInput!
  data: AttendanceUpdateInput!
}

input AttendanceCreateInput {
  date: DateTime
  recognized: String
  confidenceScore: Float
  imageCapturedURL: String
  user: UserRelateToOneForCreateInput
  class: ClassRelateToOneForCreateInput
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type FaceComparison {
  id: ID!
  comparisonDate: DateTime
  imageCapturedURL: String
  confidenceScore: Float
  comparisonResult: String
  attendance: Attendance
}

input FaceComparisonWhereUniqueInput {
  id: ID
}

input FaceComparisonWhereInput {
  AND: [FaceComparisonWhereInput!]
  OR: [FaceComparisonWhereInput!]
  NOT: [FaceComparisonWhereInput!]
  id: IDFilter
  comparisonDate: DateTimeFilter
  imageCapturedURL: StringFilter
  confidenceScore: FloatFilter
  comparisonResult: StringNullableFilter
  attendance: AttendanceWhereInput
}

input FaceComparisonOrderByInput {
  id: OrderDirection
  comparisonDate: OrderDirection
  imageCapturedURL: OrderDirection
  confidenceScore: OrderDirection
  comparisonResult: OrderDirection
}

input FaceComparisonUpdateInput {
  comparisonDate: DateTime
  imageCapturedURL: String
  confidenceScore: Float
  comparisonResult: String
  attendance: AttendanceRelateToOneForUpdateInput
}

input AttendanceRelateToOneForUpdateInput {
  create: AttendanceCreateInput
  connect: AttendanceWhereUniqueInput
  disconnect: Boolean
}

input FaceComparisonUpdateArgs {
  where: FaceComparisonWhereUniqueInput!
  data: FaceComparisonUpdateInput!
}

input FaceComparisonCreateInput {
  comparisonDate: DateTime
  imageCapturedURL: String
  confidenceScore: Float
  comparisonResult: String
  attendance: AttendanceRelateToOneForCreateInput
}

input AttendanceRelateToOneForCreateInput {
  create: AttendanceCreateInput
  connect: AttendanceWhereUniqueInput
}

type RefPhot {
  id: ID!
  imageURL: String
  embeddings: String
  user: User
}

input RefPhotWhereUniqueInput {
  id: ID
}

input RefPhotWhereInput {
  AND: [RefPhotWhereInput!]
  OR: [RefPhotWhereInput!]
  NOT: [RefPhotWhereInput!]
  id: IDFilter
  imageURL: StringFilter
  embeddings: StringFilter
  user: UserWhereInput
}

input RefPhotOrderByInput {
  id: OrderDirection
  imageURL: OrderDirection
  embeddings: OrderDirection
}

input RefPhotUpdateInput {
  imageURL: String
  embeddings: String
  user: UserRelateToOneForUpdateInput
}

input RefPhotUpdateArgs {
  where: RefPhotWhereUniqueInput!
  data: RefPhotUpdateInput!
}

input RefPhotCreateInput {
  imageURL: String
  embeddings: String
  user: UserRelateToOneForCreateInput
}

type Institution {
  id: ID!
  name: String
  size: String
  userInstitutions(where: UserInstitutionWhereInput! = {}, orderBy: [UserInstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserInstitutionWhereUniqueInput): [UserInstitution!]
  userInstitutionsCount(where: UserInstitutionWhereInput! = {}): Int
}

input InstitutionWhereUniqueInput {
  id: ID
}

input InstitutionWhereInput {
  AND: [InstitutionWhereInput!]
  OR: [InstitutionWhereInput!]
  NOT: [InstitutionWhereInput!]
  id: IDFilter
  name: StringFilter
  size: StringFilter
  userInstitutions: UserInstitutionManyRelationFilter
}

input InstitutionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  size: OrderDirection
}

input InstitutionUpdateInput {
  name: String
  size: String
  userInstitutions: UserInstitutionRelateToManyForUpdateInput
}

input InstitutionUpdateArgs {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateInput!
}

input InstitutionCreateInput {
  name: String
  size: String
  userInstitutions: UserInstitutionRelateToManyForCreateInput
}

type UserInstitution {
  id: ID!
  user: User
  institution: Institution
}

input UserInstitutionWhereUniqueInput {
  id: ID
}

input UserInstitutionWhereInput {
  AND: [UserInstitutionWhereInput!]
  OR: [UserInstitutionWhereInput!]
  NOT: [UserInstitutionWhereInput!]
  id: IDFilter
  user: UserWhereInput
  institution: InstitutionWhereInput
}

input UserInstitutionOrderByInput {
  id: OrderDirection
}

input UserInstitutionUpdateInput {
  user: UserRelateToOneForUpdateInput
  institution: InstitutionRelateToOneForUpdateInput
}

input InstitutionRelateToOneForUpdateInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
  disconnect: Boolean
}

input UserInstitutionUpdateArgs {
  where: UserInstitutionWhereUniqueInput!
  data: UserInstitutionUpdateInput!
}

input UserInstitutionCreateInput {
  user: UserRelateToOneForCreateInput
  institution: InstitutionRelateToOneForCreateInput
}

input InstitutionRelateToOneForCreateInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAuthentication(data: AuthenticationCreateInput!): Authentication
  createAuthentications(data: [AuthenticationCreateInput!]!): [Authentication]
  updateAuthentication(where: AuthenticationWhereUniqueInput!, data: AuthenticationUpdateInput!): Authentication
  updateAuthentications(data: [AuthenticationUpdateArgs!]!): [Authentication]
  deleteAuthentication(where: AuthenticationWhereUniqueInput!): Authentication
  deleteAuthentications(where: [AuthenticationWhereUniqueInput!]!): [Authentication]
  createAzureADIntegration(data: AzureADIntegrationCreateInput!): AzureADIntegration
  createAzureADIntegrations(data: [AzureADIntegrationCreateInput!]!): [AzureADIntegration]
  updateAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!, data: AzureADIntegrationUpdateInput!): AzureADIntegration
  updateAzureADIntegrations(data: [AzureADIntegrationUpdateArgs!]!): [AzureADIntegration]
  deleteAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  deleteAzureADIntegrations(where: [AzureADIntegrationWhereUniqueInput!]!): [AzureADIntegration]
  createRecognitionLog(data: RecognitionLogCreateInput!): RecognitionLog
  createRecognitionLogs(data: [RecognitionLogCreateInput!]!): [RecognitionLog]
  updateRecognitionLog(where: RecognitionLogWhereUniqueInput!, data: RecognitionLogUpdateInput!): RecognitionLog
  updateRecognitionLogs(data: [RecognitionLogUpdateArgs!]!): [RecognitionLog]
  deleteRecognitionLog(where: RecognitionLogWhereUniqueInput!): RecognitionLog
  deleteRecognitionLogs(where: [RecognitionLogWhereUniqueInput!]!): [RecognitionLog]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createAttendance(data: AttendanceCreateInput!): Attendance
  createAttendances(data: [AttendanceCreateInput!]!): [Attendance]
  updateAttendance(where: AttendanceWhereUniqueInput!, data: AttendanceUpdateInput!): Attendance
  updateAttendances(data: [AttendanceUpdateArgs!]!): [Attendance]
  deleteAttendance(where: AttendanceWhereUniqueInput!): Attendance
  deleteAttendances(where: [AttendanceWhereUniqueInput!]!): [Attendance]
  createFaceComparison(data: FaceComparisonCreateInput!): FaceComparison
  createFaceComparisons(data: [FaceComparisonCreateInput!]!): [FaceComparison]
  updateFaceComparison(where: FaceComparisonWhereUniqueInput!, data: FaceComparisonUpdateInput!): FaceComparison
  updateFaceComparisons(data: [FaceComparisonUpdateArgs!]!): [FaceComparison]
  deleteFaceComparison(where: FaceComparisonWhereUniqueInput!): FaceComparison
  deleteFaceComparisons(where: [FaceComparisonWhereUniqueInput!]!): [FaceComparison]
  createRefPhot(data: RefPhotCreateInput!): RefPhot
  createRefPhots(data: [RefPhotCreateInput!]!): [RefPhot]
  updateRefPhot(where: RefPhotWhereUniqueInput!, data: RefPhotUpdateInput!): RefPhot
  updateRefPhots(data: [RefPhotUpdateArgs!]!): [RefPhot]
  deleteRefPhot(where: RefPhotWhereUniqueInput!): RefPhot
  deleteRefPhots(where: [RefPhotWhereUniqueInput!]!): [RefPhot]
  createInstitution(data: InstitutionCreateInput!): Institution
  createInstitutions(data: [InstitutionCreateInput!]!): [Institution]
  updateInstitution(where: InstitutionWhereUniqueInput!, data: InstitutionUpdateInput!): Institution
  updateInstitutions(data: [InstitutionUpdateArgs!]!): [Institution]
  deleteInstitution(where: InstitutionWhereUniqueInput!): Institution
  deleteInstitutions(where: [InstitutionWhereUniqueInput!]!): [Institution]
  createUserInstitution(data: UserInstitutionCreateInput!): UserInstitution
  createUserInstitutions(data: [UserInstitutionCreateInput!]!): [UserInstitution]
  updateUserInstitution(where: UserInstitutionWhereUniqueInput!, data: UserInstitutionUpdateInput!): UserInstitution
  updateUserInstitutions(data: [UserInstitutionUpdateArgs!]!): [UserInstitution]
  deleteUserInstitution(where: UserInstitutionWhereUniqueInput!): UserInstitution
  deleteUserInstitutions(where: [UserInstitutionWhereUniqueInput!]!): [UserInstitution]
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  authentication(where: AuthenticationWhereUniqueInput!): Authentication
  authentications(where: AuthenticationWhereInput! = {}, orderBy: [AuthenticationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticationWhereUniqueInput): [Authentication!]
  authenticationsCount(where: AuthenticationWhereInput! = {}): Int
  azureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  azureADIntegrations(where: AzureADIntegrationWhereInput! = {}, orderBy: [AzureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AzureADIntegrationWhereUniqueInput): [AzureADIntegration!]
  azureADIntegrationsCount(where: AzureADIntegrationWhereInput! = {}): Int
  recognitionLog(where: RecognitionLogWhereUniqueInput!): RecognitionLog
  recognitionLogs(where: RecognitionLogWhereInput! = {}, orderBy: [RecognitionLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecognitionLogWhereUniqueInput): [RecognitionLog!]
  recognitionLogsCount(where: RecognitionLogWhereInput! = {}): Int
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  attendance(where: AttendanceWhereUniqueInput!): Attendance
  attendances(where: AttendanceWhereInput! = {}, orderBy: [AttendanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttendanceWhereUniqueInput): [Attendance!]
  attendancesCount(where: AttendanceWhereInput! = {}): Int
  faceComparison(where: FaceComparisonWhereUniqueInput!): FaceComparison
  faceComparisons(where: FaceComparisonWhereInput! = {}, orderBy: [FaceComparisonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FaceComparisonWhereUniqueInput): [FaceComparison!]
  faceComparisonsCount(where: FaceComparisonWhereInput! = {}): Int
  refPhot(where: RefPhotWhereUniqueInput!): RefPhot
  refPhots(where: RefPhotWhereInput! = {}, orderBy: [RefPhotOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RefPhotWhereUniqueInput): [RefPhot!]
  refPhotsCount(where: RefPhotWhereInput! = {}): Int
  institution(where: InstitutionWhereUniqueInput!): Institution
  institutions(where: InstitutionWhereInput! = {}, orderBy: [InstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstitutionWhereUniqueInput): [Institution!]
  institutionsCount(where: InstitutionWhereInput! = {}): Int
  userInstitution(where: UserInstitutionWhereUniqueInput!): UserInstitution
  userInstitutions(where: UserInstitutionWhereInput! = {}, orderBy: [UserInstitutionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserInstitutionWhereUniqueInput): [UserInstitution!]
  userInstitutionsCount(where: UserInstitutionWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
