// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                 String            @id @default(cuid())
  name                               String            @default("")
  email                              String            @unique @default("")
  password                           String
  role                               String            @default("student")
  studentID                          String            @default("")
  userInstitutions                   UserInstitution[] @relation("UserInstitution_user")
  from_Authentication_associatedUser Authentication[]  @relation("Authentication_associatedUser")
  from_RecognitionLog_user           RecognitionLog[]  @relation("RecognitionLog_user")
  from_Class_teacher                 Class[]           @relation("Class_teacher")
  from_Attendance_user               Attendance[]      @relation("Attendance_user")
  from_RefPhot_user                  RefPhot[]         @relation("RefPhot_user")
}

model Authentication {
  id                    String    @id @default(cuid())
  tokenId               String    @unique @default("")
  associatedUser        User?     @relation("Authentication_associatedUser", fields: [associatedUserId], references: [id])
  associatedUserId      String?   @map("associatedUser")
  expirationDate        DateTime?
  authenticationType    String?
  adAuthenticationToken String    @default("")
  refreshToken          String    @default("")

  @@index([associatedUserId])
}

model AzureADIntegration {
  id                  String  @id @default(cuid())
  adUserId            String  @unique @default("")
  adTenantId          String  @default("")
  roleMapping         String  @default("")
  accessTokenValidity Boolean @default(false)
  loginHistory        String  @default("")
}

model RecognitionLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  success      String?  @default("0")
  confidence   Float
  imageURL     String   @default("")
  errorDetails String   @default("")
  user         User?    @relation("RecognitionLog_user", fields: [userId], references: [id])
  userId       String?  @map("user")

  @@index([userId])
}

model Class {
  id                    String       @id @default(cuid())
  name                  String       @default("")
  description           String       @default("")
  schedule              String       @default("")
  teacher               User?        @relation("Class_teacher", fields: [teacherId], references: [id])
  teacherId             String?      @map("teacher")
  from_Attendance_class Attendance[] @relation("Attendance_class")

  @@index([teacherId])
}

model Attendance {
  id                             String           @id @default(cuid())
  date                           DateTime         @default(now())
  recognized                     String?          @default("0")
  confidenceScore                Float
  imageCapturedURL               String           @default("")
  user                           User?            @relation("Attendance_user", fields: [userId], references: [id])
  userId                         String?          @map("user")
  class                          Class?           @relation("Attendance_class", fields: [classId], references: [id])
  classId                        String?          @map("class")
  from_FaceComparison_attendance FaceComparison[] @relation("FaceComparison_attendance")

  @@index([userId])
  @@index([classId])
}

model FaceComparison {
  id               String      @id @default(cuid())
  comparisonDate   DateTime    @default(now())
  imageCapturedURL String      @default("")
  confidenceScore  Float
  comparisonResult String?     @default("0")
  attendance       Attendance? @relation("FaceComparison_attendance", fields: [attendanceId], references: [id])
  attendanceId     String?     @map("attendance")

  @@index([attendanceId])
}

model RefPhot {
  id         String  @id @default(cuid())
  imageURL   String  @default("")
  embeddings String  @default("")
  user       User?   @relation("RefPhot_user", fields: [userId], references: [id])
  userId     String? @map("user")

  @@index([userId])
}

model Institution {
  id               String            @id @default(cuid())
  name             String            @default("")
  size             String
  userInstitutions UserInstitution[] @relation("UserInstitution_institution")
}

model UserInstitution {
  id            String       @id @default(cuid())
  user          User?        @relation("UserInstitution_user", fields: [userId], references: [id])
  userId        String?      @map("user")
  institution   Institution? @relation("UserInstitution_institution", fields: [institutionId], references: [id])
  institutionId String?      @map("institution")

  @@index([userId])
  @@index([institutionId])
}
